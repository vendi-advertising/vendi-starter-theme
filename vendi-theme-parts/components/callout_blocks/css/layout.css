/*
This entire block is dedicated to the high-level layout of the component. See the third block for
detailed styling.
*/
:where(.component-callout-blocks) {
    container-type: inline-size;
    container-name: callout-block-container;

    :where(& > .component-wrapper) {
        --local-callout-block-column-width: 10rem;
    }

    :where(&.content-max-width-full) {
        :where(& > .component-wrapper) {
            --local-callout-block-column-width: calc(var(--content-width-normal) / 2);
        }
    }

    :where(& > .component-wrapper) {
        display: grid;
        grid-template-columns: auto var(--local-callout-block-column-width) var(--local-callout-block-column-width) auto;
    }

    /*
    We're going to pass an outer grid down several levels through sub grid. This will
    allow us to use the full width of the component for backgrounds, but constrain the
    content area to the normal widths. Yes, it is a little complex.
    */

    :where(&.component-layout-image-copy > .component-wrapper) {
        grid-template-areas: "left-gap image copy right-gap";
        --local-image-start: left-gap;
        --local-image-end: image;
        --local-copy-start: copy;
        --local-copy-end: right-gap;
    }

    :where(&.component-layout-copy-image > .component-wrapper) {
        grid-template-areas: "left-gap copy image right-gap";
        --local-copy-start: left-gap;
        --local-copy-end: copy;
        --local-image-start: image;
        --local-image-end: right-gap;
    }

    :where(& > .component-wrapper > .region) {
        container-type: unset;
        grid-area: unset;
        display: grid;
        grid-template-columns: subgrid;
        grid-column: 1 / -1;
        padding-block: 0;
    }

    /* Subgrid nesting only */

    :where(& > .component-wrapper > .region .content-wrap) {
        display: grid;
        grid-template-columns: subgrid;
        grid-column: 1 / -1;

        :where(& > *) {
            display: grid;
            grid-template-columns: subgrid;
            grid-row: 1;

            :where(& > *) {
                display: grid;

                :where(&:not(.image)) {
                    grid-template-columns: subgrid;
                }
            }
        }
    }

    /* Specific subgrid settings */

    :where(& > .component-wrapper > .region .content-wrap) {
        :where(& > .image-wrap) {
            grid-column: image / copy;
            grid-column-start: var(--local-image-start);
            grid-column-end: var(--local-image-end);

            :where(& > *) {
                grid-column-start: var(--local-image-start);
                grid-column-end: var(--local-image-end);
            }
        }

        :where(& > .content-and-cta-wrap) {
            grid-column: copy / image;
            grid-column-start: var(--local-copy-start);
            grid-column-end: var(--local-copy-end);

            :where(& > *) {
                grid-area: copy;
            }
        }
    }
}

@container callout-block-container (inline-size < 120rem) {
    :where(.component-callout-blocks) {
        :where(& > .component-wrapper ) {
            --local-callout-block-column-width: 1fr;

            :where(& > .region ) {
                :where(& > .content-wrap) {
                }
            }
        }
    }
}

@container callout-block-container (inline-size < 100rem) {
    :where(.component-callout-blocks) {
        :where(& > .component-wrapper ) {
            --local-callout-block-column-width: 1fr;
            display: block;

            :where(& > .region ) {
                display: block;
                grid-template-columns: unset;
                grid-column: unset;

                :where(& > .content-wrap) {
                    grid-template-columns: unset;
                    grid-column: unset;
                    grid-template-rows: 1fr 1fr;

                    :where(& > *) {
                        grid-area: unset;
                        grid-template-columns: unset;
                        grid-column: unset;
                    }

                    :where(& > .image-wrap) {
                        order: 1;
                        min-height: var(--size-xx-large);
                        padding-block: 0;
                    }

                    :where(& > .content-and-cta-wrap) {
                        order: 2;
                        padding-block: var(--size-medium);
                        min-height: var(--size-xx-large);
                    }
                }
            }
        }
    }
}
