<?php

namespace Vendi\Theme\Component;

use Vendi\Theme\BaseComponentWithPrimaryHeading;
use Vendi\Theme\ComponentInterfaces\ColorSchemeAwareInterface;
use Vendi\Theme\Traits\ColorSchemeTrait;


class LinkColumn extends BaseComponentWithPrimaryHeading implements ColorSchemeAwareInterface
{
    use ColorSchemeTrait;

    private ?array $links = null;

    public function __construct()
    {
        parent::__construct('component-link-column');
    }

    protected function initComponent(): void
    {
        parent::initComponent();
        $this->componentStyles->addCssProperty('local-content-background-color', $this->getContentBackgroundColorWithAlpha());
    }

    public function getContentBackgroundColorWithAlpha(float $alpha = 0.85)
    {
        if ( ! $color = get_sub_field('content_box_background_color')) {
            $color = 'var(--color-brand-primary-spd-blue)';
        }

        $alpha = ((int)100 * $alpha) / 100;

        return sprintf('rgba(from %1$s r g b / %2$s)', $color, $alpha);
    }

    protected function performAdditionalActionsOnBackgroundImage(array $background_image): array
    {
        $width  = $background_image['width'] ?? 0;
        $height = $background_image['height'] ?? 0;
        if ( ! $width || ! $height) {
            return $background_image;
        }

        if ($width < 1920) {
            return $background_image;
        }

        $newWidth  = 1920;
        $newHeight = ($newWidth / $width) * $height;
        if ($ret = bis_get_attachment_image_src($background_image['ID'], [$newWidth, $newHeight])) {
            $ret['url'] = $ret['src'];
            $ret['ID']  = $background_image['ID'];

            return $ret;
        }

        return $background_image;
    }

    protected function abortRender(): bool
    {
        if ( ! $this->hasLinks()) {
            return true;
        }

        return parent::abortRender(); // TODO: Change the autogenerated stub
    }

    private function hasLinks(): bool
    {
        return ! empty($this->getLinks());
    }

    public function getLinksSimplified(): array
    {
        $links = [];
        foreach ($this->getLinks() as $linkSubArray) {
            if ( ! $link = ($linkSubArray['link'] ?? null)) {
                continue;
            }

            $links[] = $link;
        }

        return $links;
    }

    public function getLinks(): array
    {
        if ( ! $this->links) {
            $this->links = $this->getSubField('links');
            if ( ! is_iterable($this->links)) {
                $this->links = [];
            }
        }

        return $this->links;
    }

}
